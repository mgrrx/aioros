<?xml version="1.0" encoding="utf-8"?>
<!--
	This is a Relax NG schema for XML-RPC methodCall and methodResponse. It is
	based on word written specification on http://xmlrpc.scripting.com/spec.

	<dateTime.iso8601> type checking is not strict as in specification. A lot
	of applications use format yyyymmddThh:mm:ss. Higher application level
	should deal with it.

	@author  Miloslav HÅ¯la (https://github.com/milo)
-->
<grammar
	xmlns="http://relaxng.org/ns/structure/1.0"
	datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
>
	<start>
		<choice>
			<element name="methodCall">
				<element name="methodName">
					<data type="string">
						<param name="pattern">[a-zA-Z0-9_.:/]+</param>
					</data>
				</element>
				<optional>
					<element name="params">
                        <zeroOrMore>
                            <ref name="param" />
                        </zeroOrMore>
					</element>
				</optional>
			</element>

			<element name="methodResponse">
				<choice>
                    <element name="params">
                        <ref name="param" />
                    </element>

					<ref name="fault" />
				</choice>
			</element>
		</choice>
	</start>


	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<define name="param">
		<element name="param">
			<ref name="value" />
		</element>
	</define>


	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<define name="value">
		<element name="value">
			<choice>
				<text />

				<element name="string">
					<text />
				</element>

				<element name="i4">
					<data type="int" />
				</element>
				<element name="int">
					<data type="int" />
				</element>

				<element name="boolean">
					<choice>
						<value>0</value>
						<value>1</value>
					</choice>
				</element>

				<element name="double">
					<data type="double" />
				</element>

				<element name="dateTime.iso8601">
					<choice>
						<data type="dateTime" />
						<data type="string">
							<param name="pattern">([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):?([0-9]{2}):?([0-9]{2})Z?</param>
						</data>
					</choice>
				</element>

				<element name="base64">
					<data type="base64Binary" />
				</element>

				<element name="nil">
					<empty />
				</element>

				<element name="struct">
					<zeroOrMore>
						<element name="member">
							<element name="name">
								<text />
							</element>
							<ref name="value" />
						</element>
					</zeroOrMore>
				</element>

				<element name="array">
					<element name="data">
						<zeroOrMore>
							<ref name="value" />
						</zeroOrMore>
					</element>
				</element>
			</choice>
		</element>
	</define>


	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<define name="fault">
		<element name="fault">
			<element name="value">
				<element name="struct">
					<element name="member">
						<element name="name">
							<value>faultCode</value>
						</element>
						<element name="value">
                            <choice>
                                <element name="int">
                                    <data type="int" />
                                </element>
                                <element name="i4">
                                    <data type="int" />
                                </element>
                            </choice>
						</element>
					</element>
					<element name="member">
						<element name="name">
							<value>faultString</value>
						</element>
						<element name="value">
							<choice>
								<text />
								<element name="string">
									<text />
								</element>
							</choice>
						</element>
					</element>
				</element>
			</element>
		</element>
	</define>

</grammar>
